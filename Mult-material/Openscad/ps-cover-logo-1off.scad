/*

	Power supply cover for 12V 20A supply.

	Adrian Bowyer
	April 2012

	Licence: GPL
*/


zi=41;              // internal height
xi=112;            // Internal width
yi=51;              // Internal depth
thick=2.5;        // Wall thickness
screw_y=26;   // Retaining screw coord
screw_z=37;   // Retaining screw coord
screw_d=3.3;  //  Retaining screw diameter
head_d=6;       //  Retaining screw head diameter
fixz=34;           // Retaining cone z coord
catchy=10;  	// catch y pos
catcha=10;
catchb=10;
catchc=25;
catchoff=[catcha/2-6,0,catchc-21+5];
c8x=23;           // IEC C8 rectangle size X
c8y=18;           // IEC C8 rectangle size Y
c8holes=30;   //  IEC C8 mounting hole centres
wx = 7;             // Low voltage wire size X
wy = 3.5;         // Low voltage wire size Y
wthick=4;        // Wire clamp thickness
whigh=20;      // Wire clamp height
wlong=20;      // Wire clamp length
basez=14;      // Indentation for bottom sheet
wallx=54;       // Wall between mains and low-voltage side
walldent1 = 50; //Wall indentations to accommodate screw connector etc
walldent2=60;
walldent3=35;

clampxyz=[-xi/2 + wlong/2 + 10, yi/2 - (wy+wthick*2)/2 - 5, -zi/2 + whigh/2 - 0.5];
logoxyz=clampxyz-[-25,18,12];
logoThick = 5;
screwxyz=[-xi/2, yi/2-screw_y, -zi/2 +screw_z];
catchxyz=[(xi-catcha)/2,-(yi-catchb)/2 + catchy,-(zi-catchc)/2];


//ps_cover();


intersection() { logo(); body(); }

module logo()
{
	color("green")

	translate(logoxyz)
	rotate([0,180,0])
	scale([1.3,1.3,1])
	difference()
	{
		union()
		{
			cube([34,18,4],center=true);
			cube([28,24,4],center=true);
			for(i=[-1,1])
			{
				translate([i*(34/2-3), 18/2,0])
					cylinder(r=3,h=4,center=true,$fn=20);
				translate([i*(34/2-3),-18/2 ,0])
					cylinder(r=3,h=4,center=true,$fn=20);
			}
		}
		translate([0,0,-2.5])
		union()
		{
			poly_path3033(logoThick);
			poly_path3045(logoThick);
			poly_path2894(logoThick);
			poly_path3047(logoThick);
			poly_rect3668(logoThick);
			poly_path3049(logoThick);
			poly_path3039(logoThick);
			poly_path3036(logoThick);
			poly_path3041(logoThick);
			poly_path3043(logoThick);
		}
	}

}

module body()
{
	difference()
			{
				cube([xi+2*thick,yi+thick,zi+thick],center=true);
				translate([0,0,thick])
					cube([xi,yi-thick,zi+thick],center=true);
				translate([0,-yi/2,thick+basez])
					cube([xi,5*thick,zi],center=true);
			}
}

module ps_cover()
{
	difference()
	{
		union()
		{
			body();
			translate(clampxyz)
				wire_clamp();
			translate(catchxyz)
				cube([catcha,catchb,catchc],center=true);
			translate([(xi+2*thick)/2 - wallx,0,0])
				difference()
				{
					cube([thick,yi+thick,zi+thick],center=true);
					translate([0, -(yi+thick)/2, (zi+thick)/2])
						cube([5*thick,walldent1,walldent2],center=true);
					translate([0, (yi+thick)/2, (zi+thick)/2])
						cube([5*thick,walldent2,walldent3],center=true);
				}
		}
		translate([xi/2 - c8holes/2 - 10, yi/2 - c8y/2 - 5, -zi/2])
			c8_holes();
		translate(clampxyz)
			wire_holes();
		translate(screwxyz)
			rotate([0,90,0])
				cylinder(r=screw_d/2,h=10,center=true,$fn=20);
		translate(catchxyz+catchoff)
		{
			rotate([90,0,0])
				cylinder(r=1.5,h=100,center=true,$fn=20);
			translate([0,50,0])
				rotate([90,0,0])
					cylinder(r=3,h=60,center=true,$fn=20);
		}

		logo();
	}
}

module wire_holes()
{
	translate([-wthick,0,0])
		cube([wx,wy,zi*5],center=true);
	translate([wlong/2-screw_d,0,whigh/2-screw_d])
	{
		rotate([90,0,0])
			cylinder(r=screw_d/2,h=50,center=true,$fn=20);
		translate([0,5+(wy+wthick*2)/2,0])
		rotate([90,0,0])
			cylinder(r=head_d/2,h=10,center=true,$fn=20);
	}
}


module wire_clamp()
{
	difference()
	{
		cube([wlong,wy+wthick*2,whigh],center=true);
		translate([wthick,0,0])
			cube([wlong,wy,2*whigh],center=true);
	}
}


module c8_holes()
{
	union()
	{
		cube([c8x,c8y,10*thick],center=true);
		translate([-c8holes/2,0,0])
			cylinder(h=10*thick,r=screw_d/2,center=true,$fn=20);
		translate([c8holes/2,0,0])
			cylinder(h=10*thick,r=screw_d/2,center=true,$fn=20);
	}
}






// Module names are of the form poly_<inkscape-path-id>().  As a result,
// you can associate a polygon in this OpenSCAD program with the corresponding
// SVG element in the Inkscape document by looking for the XML element with
// the attribute id="inkscape-path-id".

// fudge value is used to ensure that subtracted solids are a tad taller
// in the z dimension than the polygon being subtracted from.  This helps
// keep the resulting .stl file manifold.
fudge = 0.1;

module poly_path3033(h)
{
  scale([25.4/90, -25.4/90, 1]) union()
  {
    difference()
    {
       linear_extrude(height=h)
         polygon([[-5.085352,19.374736],[-5.085352,32.616923],[-14.108789,32.616923],[-14.108789,-2.375264],[-0.327539,-2.375264],[2.898034,-2.230225],[5.660724,-1.795160],[7.960533,-1.070069],[9.797461,-0.054952],[11.212483,1.273679],[12.223219,2.939211],[12.829670,4.941647],[13.031836,7.280986],[12.609938,10.439205],[11.344336,12.976298],[9.252518,14.909905],[6.305273,16.257548],[8.057207,16.948966],[9.609961,18.179423],[11.092361,20.042714],[12.586523,22.679423],[17.484961,32.616923],[7.875586,32.616923],[3.609961,23.921611],[2.309164,21.712635],[0.984961,20.335673],[-0.550209,19.614980],[-2.530664,19.374736],[-5.085352,19.374736]]);
       translate([0, 0, -fudge])
         linear_extrude(height=h+2*fudge)
           polygon([[-1.288477,13.140361],[1.143149,12.876704],[2.766211,12.085673],[3.697835,10.691159],[4.008398,8.616923],[3.697835,6.566162],[2.766211,5.195048],[1.143149,4.421632],[-1.288477,4.163798],[-5.085352,4.163798],[-5.085352,13.140361]]);
    }
  }
}

module poly_path3045(h)
{
  scale([25.4/90, -25.4/90, 1]) union()
  {
    difference()
    {
       linear_extrude(height=h)
         polygon([[5.593479,-22.090523],[5.593479,-15.387723],[1.272512,-15.387723],[1.272512,-33.099722],[7.871806,-33.099722],[10.739349,-32.806091],[12.720269,-31.925249],[13.881868,-30.409693],[14.269083,-28.212017],[14.067053,-26.613420],[13.461006,-25.329220],[12.459317,-24.350486],[11.047998,-23.668350],[12.630482,-22.695554],[14.055840,-20.417788],[16.401508,-15.387723],[11.799959,-15.387723],[9.757320,-19.789030],[8.500311,-21.604125],[6.816817,-22.090523],[5.593479,-22.090523]]);
       translate([0, 0, -fudge])
         linear_extrude(height=h+2*fudge)
           polygon([[7.411652,-25.246177],[8.576061,-25.379632],[9.353281,-25.780028],[9.799399,-26.485890],[9.948116,-27.535806],[9.799399,-28.573840],[9.353281,-29.267857],[8.576061,-29.659337],[7.411652,-29.789845],[5.593479,-29.789845],[5.593479,-25.246177]]);
    }
  }
}

module poly_path2894(h)
{
  scale([25.4/90, -25.4/90, 1]) union()
  {
    linear_extrude(height=h)
      polygon([[48.469119,19.093223],[48.184557,21.916021],[47.368419,24.545185],[46.077029,26.924390],[44.366710,28.997314],[42.293787,30.707632],[39.914581,31.999022],[37.285418,32.815160],[34.462619,33.099722],[31.639821,32.815160],[29.010657,31.999022],[26.631452,30.707632],[24.558528,28.997314],[22.848209,26.924390],[21.556819,24.545185],[20.740681,21.916021],[20.456119,19.093223],[20.740681,16.270425],[21.556819,13.641261],[22.848209,11.262055],[24.558528,9.189132],[26.631452,7.478813],[29.010657,6.187423],[31.639821,5.371285],[34.462619,5.086723],[37.285418,5.371285],[39.914581,6.187423],[42.293787,7.478813],[44.366710,9.189132],[46.077029,11.262055],[47.368419,13.641261],[48.184557,16.270425],[48.469119,19.093223]]);
  }
}

module poly_path3047(h)
{
  scale([25.4/90, -25.4/90, 1]) union()
  {
    difference()
    {
       linear_extrude(height=h)
         polygon([[30.554078,-22.968411],[30.554078,-15.387723],[26.502470,-15.387723],[26.502470,-17.357041],[25.643881,-16.310099],[24.684297,-15.589400],[23.564768,-15.180114],[22.226395,-15.043685],[20.455918,-15.343236],[19.050203,-16.241885],[18.141116,-17.629897],[17.838088,-19.373813],[18.216873,-21.399477],[19.353232,-22.802324],[21.311694,-23.620890],[24.134355,-23.893754],[26.502470,-23.893754],[26.502470,-24.225928],[26.314472,-25.097877],[25.750509,-25.696985],[24.788106,-26.052877],[23.404841,-26.171518],[21.003057,-25.898662],[18.937970,-25.080090],[18.937970,-28.318787],[21.530551,-28.817049],[24.134355,-28.994999],[27.060821,-28.639088],[29.038934,-27.571395],[30.175282,-25.714771],[30.554078,-22.968411]]);
       translate([0, 0, -fudge])
         linear_extrude(height=h+2*fudge)
           polygon([[24.414937,-21.366857],[22.518201,-20.916049],[22.046819,-20.358468],[21.889696,-19.587353],[22.394745,-18.317974],[23.820103,-17.867166],[24.863863,-18.080705],[25.728062,-18.721328],[26.308861,-19.694120],[26.502470,-20.880460],[26.502470,-21.366857],[24.414937,-21.366857]]);
    }
  }
}

module poly_rect3668(h)
{
  scale([25.4/90, -25.4/90, 1]) union()
  {
    linear_extrude(height=h)
      polygon([[34.735515,-0.594379],[45.105917,10.103823],[34.494317,20.419423],[24.123915,9.721221]]);
  }
}

module poly_path3049(h)
{
  scale([25.4/90, -25.4/90, 1]) union()
  {
    difference()
    {
       linear_extrude(height=h)
         polygon([[38.331823,-17.309588],[38.331823,-10.333931],[34.313884,-10.333931],[34.313884,-28.674688],[38.331823,-28.674688],[38.331823,-26.729097],[40.172445,-28.437421],[41.258288,-28.855594],[42.495667,-28.994999],[44.611244,-28.505625],[46.311584,-27.037544],[47.431097,-24.810191],[47.804279,-22.019342],[47.431097,-19.225518],[46.311584,-16.989277],[44.611244,-15.530084],[42.495667,-15.043685],[41.258288,-15.180114],[40.172445,-15.589400],[38.331823,-17.309588]]);
       translate([0, 0, -fudge])
         linear_extrude(height=h+2*fudge)
           polygon([[41.002961,-25.910525],[39.860988,-25.658421],[39.016442,-24.902139],[38.502973,-23.683173],[38.331823,-22.019342],[38.502973,-20.352536],[39.016442,-19.124682],[39.860988,-18.377288],[41.002961,-18.128159],[42.139313,-18.377288],[42.967042,-19.124682],[43.480500,-20.346605],[43.651660,-22.019342],[43.480500,-23.692070],[42.967042,-24.914002],[42.139313,-25.661387]]);
    }
  }
}

module poly_path3039(h)
{
  scale([25.4/90, -25.4/90, 1]) union()
  {
    difference()
    {
       linear_extrude(height=h)
         polygon([[-44.148152,-22.090523],[-44.148152,-15.387723],[-48.469119,-15.387723],[-48.469119,-33.099722],[-41.869825,-33.099722],[-39.002282,-32.806091],[-37.021362,-31.925249],[-35.859762,-30.409693],[-35.472548,-28.212017],[-35.674578,-26.613420],[-36.280625,-25.329220],[-37.282314,-24.350486],[-38.693633,-23.668350],[-37.111149,-22.695554],[-35.685791,-20.417788],[-33.340122,-15.387723],[-37.941672,-15.387723],[-39.984311,-19.789030],[-41.241320,-21.604125],[-42.924813,-22.090523],[-44.148152,-22.090523]]);
       translate([0, 0, -fudge])
         linear_extrude(height=h+2*fudge)
           polygon([[-42.329979,-25.246177],[-41.165570,-25.379632],[-40.388349,-25.780028],[-39.942232,-26.485890],[-39.793515,-27.535806],[-39.942232,-28.573840],[-40.388349,-29.267857],[-41.165570,-29.659337],[-42.329979,-29.789845],[-44.148152,-29.789845],[-44.148152,-25.246177]]);
    }
  }
}

module poly_path3036(h)
{
  scale([25.4/90, -25.4/90, 1]) union()
  {
    difference()
    {
       linear_extrude(height=h)
         polygon([[-48.187968,-2.375264],[-33.211406,-2.375264],[-30.066400,-2.189209],[-27.311034,-1.631098],[-24.945307,-0.700929],[-22.969218,0.601298],[-21.400388,2.236080],[-20.279789,4.187257],[-19.607420,6.454830],[-19.383281,9.038798],[-19.607420,11.634512],[-20.279789,13.913812],[-21.400388,15.876699],[-22.969218,17.523173],[-24.945307,18.815172],[-27.311034,19.738026],[-30.066400,20.291735],[-33.211406,20.476298],[-39.164531,20.476298],[-39.164531,32.616923],[-48.187968,32.616923],[-48.187968,-2.375264]]);
       translate([0, 0, -fudge])
         linear_extrude(height=h+2*fudge)
           polygon([[-39.164531,4.163798],[-39.164531,13.937236],[-34.172343,13.937236],[-31.846186,13.620844],[-30.117656,12.671611],[-29.045407,11.118893],[-28.687968,9.038798],[-29.045407,6.964599],[-30.117656,5.429423],[-31.846186,4.480226],[-34.172343,4.163798]]);
    }
  }
}

module poly_path3041(h)
{
  scale([25.4/90, -25.4/90, 1]) union()
  {
    difference()
    {
       linear_extrude(height=h)
         polygon([[-18.413144,-22.066796],[-18.413144,-20.856733],[-27.807039,-20.856733],[-27.478761,-19.548794],[-26.785719,-18.614558],[-25.736347,-18.054012],[-24.339042,-17.867166],[-21.746461,-18.258656],[-19.007978,-19.468720],[-19.007978,-16.194432],[-21.858694,-15.340270],[-24.709411,-15.043685],[-27.742509,-15.500425],[-30.018028,-16.870643],[-31.432164,-19.077225],[-31.903541,-22.019342],[-31.440581,-24.922893],[-30.051697,-27.132451],[-27.840713,-28.529352],[-24.933877,-28.994999],[-22.268353,-28.523420],[-20.197648,-27.108725],[-18.859281,-24.905098],[-18.413144,-22.066796]]);
       translate([0, 0, -fudge])
         linear_extrude(height=h+2*fudge)
           polygon([[-22.543315,-23.478536],[-22.711673,-24.569958],[-23.216713,-25.424127],[-23.982709,-25.984663],[-24.956324,-26.171518],[-26.014124,-25.996526],[-26.853060,-25.471581],[-27.445092,-24.629275],[-27.762146,-23.478536]]);
    }
  }
}

module poly_path3043(h)
{
  scale([25.4/90, -25.4/90, 1]) union()
  {
    difference()
    {
       linear_extrude(height=h)
         polygon([[-11.364917,-17.309588],[-11.364917,-10.333931],[-15.382855,-10.333931],[-15.382855,-28.674688],[-11.364917,-28.674688],[-11.364917,-26.729097],[-9.524297,-28.437421],[-8.438450,-28.855594],[-7.201076,-28.994999],[-5.085494,-28.505625],[-3.385157,-27.037544],[-2.265644,-24.810191],[-1.892459,-22.019342],[-2.265644,-19.225518],[-3.385157,-16.989277],[-5.085494,-15.530084],[-7.201076,-15.043685],[-8.438450,-15.180114],[-9.524297,-15.589400],[-11.364917,-17.309588]]);
       translate([0, 0, -fudge])
         linear_extrude(height=h+2*fudge)
           polygon([[-8.693773,-25.910525],[-9.835749,-25.658421],[-10.680296,-24.902139],[-11.193766,-23.683173],[-11.364917,-22.019342],[-11.193766,-20.352536],[-10.680296,-19.124682],[-9.835749,-18.377288],[-8.693773,-18.128159],[-7.557423,-18.377288],[-6.729698,-19.124682],[-6.216240,-20.346605],[-6.045077,-22.019342],[-6.216240,-23.692070],[-6.729698,-24.914002],[-7.557423,-25.661387],[-8.693773,-25.910525]]);
    }
  }
}






